{
  "address": "0x544C9160505712d6B5E12888b5eB9bCb708885aF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IVaultIndex.Component",
          "name": "component",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "order",
          "type": "uint256"
        }
      ],
      "name": "ComponentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IVaultIndex.Component",
          "name": "component",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "order",
          "type": "uint256"
        }
      ],
      "name": "ComponentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVaultIndex.Component",
          "name": "component",
          "type": "tuple"
        }
      ],
      "name": "addComponent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "components",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "order",
          "type": "uint256"
        }
      ],
      "name": "getComponentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getComponentPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "order",
          "type": "uint256"
        }
      ],
      "name": "getComponentUnderlying",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVaultIndex.Component[]",
          "name": "components_",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "od",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareDenom",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "adjustWeight",
          "type": "bool"
        }
      ],
      "name": "rebalanceFromTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "order",
          "type": "uint256"
        }
      ],
      "name": "removeComponent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "setTargetWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "order",
          "type": "uint256"
        }
      ],
      "name": "targetComponent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b58bd9b8fff0f790e9f5795bdfba22dae2fa7c1470fcb31ab3ec99db49dfb30",
  "receipt": {
    "to": null,
    "from": "0x90A4a90e6FAf88c4d709F666D26793F9e2B47183",
    "contractAddress": "0x544C9160505712d6B5E12888b5eB9bCb708885aF",
    "transactionIndex": 1,
    "gasUsed": "2714614",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0001beaa0000076c9c1ffeb227469048d78db834262830e36d94bb1ea366d061",
    "transactionHash": "0x6b58bd9b8fff0f790e9f5795bdfba22dae2fa7c1470fcb31ab3ec99db49dfb30",
    "logs": [],
    "blockNumber": 38652369,
    "cumulativeGasUsed": "2865021",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d3a545f609135317a3bfe4c2cf817d7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVaultIndex.Component\",\"name\":\"component\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"ComponentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVaultIndex.Component\",\"name\":\"component\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"ComponentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct IVaultIndex.Component\",\"name\":\"component\",\"type\":\"tuple\"}],\"name\":\"addComponent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"components\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"getComponentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComponentPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"getComponentUnderlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct IVaultIndex.Component[]\",\"name\":\"components_\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"od\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareDenom\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"adjustWeight\",\"type\":\"bool\"}],\"name\":\"rebalanceFromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"removeComponent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setTargetWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"targetComponent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultIndex.sol\":\"VaultIndex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/PipelineAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/IPipeline.sol\\\";\\n\\ncontract PipelineAdapter {\\n    using Address for address;\\n\\n    IRegistry public registry;\\n\\n    function _deposit(\\n        address vault,\\n        IERC20 tokenIn,\\n        uint256 amountIn\\n    ) internal returns (uint256 price) {\\n        address pipeline = registry.getVaultPipeline(vault);\\n        bytes memory returnData = pipeline.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                IPipeline.deposit.selector,\\n                registry,\\n                vault,\\n                address(tokenIn),\\n                amountIn\\n            )\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function _withdraw(\\n        address vault,\\n        IERC20 tokenOut,\\n        uint256 shareNum,\\n        uint256 shareDenom\\n    ) internal returns (uint256 amountOut) {\\n        address pipeline = registry.getVaultPipeline(vault);\\n        bytes memory returnData = pipeline.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                IPipeline.withdraw.selector,\\n                registry,\\n                vault,\\n                address(tokenOut),\\n                shareNum,\\n                shareDenom\\n            )\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function _getUnderlying(address vault)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address pipeline = registry.getVaultPipeline(vault);\\n        return IPipeline(pipeline).getUnderlying(vault);\\n    }\\n\\n    function _getPrice(address vault) internal view returns (uint256) {\\n        address pipeline = registry.getVaultPipeline(vault);\\n        return IPipeline(pipeline).getPrice(registry, vault, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf29451170525a1cc7d36e9e7cc707f2e19500e5244b97aab5d037255e49dafb2\",\"license\":\"MIT\"},\"contracts/VaultIndex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./PipelineAdapter.sol\\\";\\nimport \\\"./interfaces/IVaultIndex.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\n\\ncontract VaultIndex is\\n    IVaultIndex,\\n    PipelineAdapter,\\n    ERC20Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    Component[] public components;\\n\\n    uint256 public totalWeight;\\n\\n    // EVENTS\\n\\n    event Deposit(address account, address tokenIn, uint256 amount);\\n\\n    event Withdrawal(address account, address tokenOut, uint256 amount);\\n\\n    event ComponentAdded(Component component, uint256 order);\\n\\n    event ComponentRemoved(Component component, uint256 order);\\n\\n    // CONSTRUCTOR\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        address owner_,\\n        Component[] calldata components_\\n    ) external initializer {\\n        // Dependencies init\\n        __Ownable_init();\\n        __ERC20_init(name_, symbol_);\\n\\n        // Setup fields\\n        registry = IRegistry(IFactory(msg.sender).registry());\\n        transferOwnership(owner_);\\n        uint256 totalWeight_;\\n        for (uint256 i = 0; i < components_.length; i++) {\\n            require(\\n                registry.getVaultPipeline(components_[i].vault) != address(0),\\n                \\\"Unsupported vault\\\"\\n            );\\n            components.push(components_[i]);\\n            totalWeight_ += components_[i].targetWeight;\\n        }\\n        totalWeight = totalWeight_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function deposit(IERC20 tokenIn, uint256 amount) external {\\n        require(\\n            registry.isTokenWhitelisted(address(tokenIn)),\\n            \\\"Unsupported token in\\\"\\n        );\\n\\n        // Get component prices and total prices\\n        (, uint256 currentTotalPrice) = getComponentPrices();\\n\\n        // Transfer token to address\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Deposit each component according to it's target share\\n        uint256 boughtPrice;\\n        for (uint256 i = 0; i < components.length; i++) {\\n            boughtPrice += _deposit(\\n                components[i].vault,\\n                tokenIn,\\n                (amount * components[i].targetWeight) / totalWeight\\n            );\\n        }\\n\\n        // Mint i-tokens according to relating of bought price to current total price\\n        if (currentTotalPrice == 0) {\\n            _mint(msg.sender, boughtPrice);\\n        } else {\\n            _mint(\\n                msg.sender,\\n                (totalSupply() * boughtPrice) / currentTotalPrice\\n            );\\n        }\\n\\n        // Event\\n        emit Deposit(msg.sender, address(tokenIn), amount);\\n    }\\n\\n    function withdraw(IERC20 tokenOut, uint256 tokens)\\n        external\\n        returns (uint256 amountOut)\\n    {\\n        require(\\n            registry.isTokenWhitelisted(address(tokenOut)),\\n            \\\"Unsupported token out\\\"\\n        );\\n\\n        // Burn i-tokens from sender address\\n        uint256 supply = totalSupply();\\n        _burn(msg.sender, tokens);\\n\\n        // Withdraw share in each component\\n        for (uint256 i = 0; i < components.length; i++) {\\n            amountOut += _withdraw(\\n                components[i].vault,\\n                tokenOut,\\n                tokens,\\n                supply\\n            );\\n        }\\n\\n        // Transfer obtained funds to sender\\n        tokenOut.safeTransfer(msg.sender, amountOut);\\n\\n        // Event\\n        emit Withdrawal(msg.sender, address(tokenOut), amountOut);\\n    }\\n\\n    // RESTRICTED PUBLIC FUNCTIONS\\n\\n    function addComponent(Component memory component) external onlyOwner {\\n        require(\\n            registry.getVaultPipeline(component.vault) != address(0),\\n            \\\"Unsupported vault\\\"\\n        );\\n\\n        // Add component to list\\n        components.push(component);\\n        totalWeight += component.targetWeight;\\n\\n        // Rebalance to new component\\n        _targetComponent(components.length - 1);\\n\\n        // Emit event\\n        emit ComponentAdded(component, components.length - 1);\\n    }\\n\\n    function rebalanceFromTo(\\n        uint256 od,\\n        uint256 oi,\\n        uint256 shareNum,\\n        uint256 shareDenom,\\n        bool adjustWeight\\n    ) external onlyOwner {\\n        _rebalanceFromTo(od, oi, shareNum, shareDenom);\\n        if (adjustWeight) {\\n            (\\n                uint256[] memory prices,\\n                uint256 totalPrice\\n            ) = getComponentPrices();\\n            Component storage cd = components[od];\\n            Component storage ci = components[oi];\\n            uint256 otherPrice = totalPrice - prices[od] - prices[oi];\\n            uint256 otherWeights = totalWeight -\\n                cd.targetWeight -\\n                ci.targetWeight;\\n            cd.targetWeight = (otherWeights * prices[od]) / otherPrice;\\n            ci.targetWeight = (otherWeights * prices[oi]) / otherPrice;\\n            totalWeight = otherWeights + cd.targetWeight + ci.targetWeight;\\n        }\\n    }\\n\\n    function removeComponent(uint256 order) external onlyOwner {\\n        // Update weights\\n        totalWeight -= components[order].targetWeight;\\n        components[order].targetWeight = 0;\\n\\n        // Rebalance\\n        _targetComponent(order);\\n\\n        // Remove component from list and emit event\\n        emit ComponentRemoved(components[order], order);\\n        components[order] = components[components.length - 1];\\n        components.pop();\\n    }\\n\\n    function targetComponent(uint256 order) external onlyOwner {\\n        _targetComponent(order);\\n    }\\n\\n    function setTargetWeights(uint256[] calldata weights) external onlyOwner {\\n        require(weights.length == components.length, \\\"Invalid weights length\\\");\\n        uint256 newTotalWeight;\\n        for (uint256 i = 0; i < weights.length; i++) {\\n            components[i].targetWeight = weights[i];\\n            newTotalWeight += weights[i];\\n        }\\n        totalWeight = newTotalWeight;\\n    }\\n\\n    function adjustWeights() external onlyOwner {\\n        (uint256[] memory prices, uint256 totalPrice) = getComponentPrices();\\n        uint256 newTotalWeight = 1_000_000_000;\\n        uint256 realTotalWeight;\\n        for (uint256 i = 0; i < prices.length; i++) {\\n            uint256 weight = (newTotalWeight * prices[i]) / totalPrice;\\n            realTotalWeight += weight;\\n            components[i].targetWeight = weight;\\n        }\\n        totalWeight = realTotalWeight;\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function getComponentPrices()\\n        public\\n        view\\n        returns (uint256[] memory prices, uint256 totalPrice)\\n    {\\n        prices = new uint256[](components.length);\\n        for (uint256 i = 0; i < prices.length; i++) {\\n            prices[i] = getComponentPrice(i);\\n            totalPrice += prices[i];\\n        }\\n    }\\n\\n    function getComponentPrice(uint256 order)\\n        public\\n        view\\n        returns (uint256 price)\\n    {\\n        return _getPrice(components[order].vault);\\n    }\\n\\n    function getComponentUnderlying(uint256 order)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return _getUnderlying(components[order].vault);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    function _rebalanceFromTo(\\n        uint256 od,\\n        uint256 oi,\\n        uint256 shareNum,\\n        uint256 shareDenom\\n    ) private {\\n        // Get intermediate token\\n        IERC20 through = IERC20(getComponentUnderlying(oi)[0]);\\n\\n        // Withdraw first component to this token\\n        uint256 sellPrice = _withdraw(\\n            components[od].vault,\\n            through,\\n            shareNum,\\n            shareDenom\\n        );\\n\\n        // Deposit to second components with this token\\n        _deposit(components[oi].vault, through, sellPrice);\\n    }\\n\\n    function _targetComponent(uint256 order) private {\\n        // Get component prices and total price\\n        (uint256[] memory prices, uint256 totalPrice) = getComponentPrices();\\n\\n        uint256 targetPrice = (totalPrice * components[order].targetWeight) /\\n            totalWeight;\\n        if (targetPrice > prices[order]) {\\n            uint256 diffNum = targetPrice - prices[order];\\n            uint256 diffDenom = totalPrice - prices[order];\\n            // Sell required share of each component to increase current\\n            for (uint256 i = 0; i < components.length; i++) {\\n                if (i != order) {\\n                    _rebalanceFromTo(i, order, diffNum, diffDenom);\\n                }\\n            }\\n        } else {\\n            // Buy other components according to their share to decrease current\\n            totalPrice -= prices[order];\\n            for (uint256 i = 0; i < components.length; i++) {\\n                if (i != order) {\\n                    _rebalanceFromTo(order, i, prices[i], totalPrice);\\n                    totalPrice -= prices[i];\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65810d4963a6538b134b9ed12925e87acd1e970388fc0b71c4c93119fe9b7d0a\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xeb2af7dd10775ab4e4a1cb79ec41c60d780290e10010676b1951d2b7682d9e09\",\"license\":\"MIT\"},\"contracts/interfaces/IPipeline.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRegistry.sol\\\";\\n\\ninterface IPipeline {\\n    // MUTATIVE FUNCTIONS\\n\\n    function deposit(\\n        IRegistry registry,\\n        address vault,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external returns (uint256 price);\\n\\n    function withdraw(\\n        IRegistry registry,\\n        address vault,\\n        address tokenOut,\\n        uint256 shareNum,\\n        uint256 shareDenom\\n    ) external returns (uint256 amountOut);\\n\\n    // VIEW FUNCTIONS\\n\\n    function getUnderlying(address vault)\\n        external\\n        view\\n        returns (address[] memory tokens);\\n\\n    function getPrice(\\n        IRegistry registry,\\n        address vault,\\n        address account\\n    ) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xcbcabeff698bed3868d7b86cde2ed7d334176d76b9285c3b5304275959494a40\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IRegistry {\\n    function getVaultPipeline(address vault) external view returns (address);\\n\\n    function getPipelineData(bytes32 slot) external view returns (bytes memory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function getPriceFeed(address token) external view returns (address);\\n\\n    enum SwapType {\\n        None,\\n        UniswapV2\\n    }\\n\\n    struct SwapData {\\n        SwapType swapType;\\n        bytes data;\\n    }\\n\\n    function getSwapData(address from, address to)\\n        external\\n        view\\n        returns (SwapData memory);\\n\\n    function defaultUniswapV2Router() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2185dafb351be452a94fb4e04b2275f2a200ab90a89444d0bde4eb5fb514b8f2\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultIndex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultIndex {\\n    struct Component {\\n        address vault;\\n        uint256 targetWeight;\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        address owner_,\\n        Component[] memory components_\\n    ) external;\\n}\\n\",\"keccak256\":\"0x173cc7466f52db3920b3ce89aedfdb30507a15e3e231c9088511fee31b5efdc5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613022806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637b10399911610104578063a7cb4192116100a2578063dd62ed3e11610071578063dd62ed3e146103f7578063f0d175cb1461040a578063f2fde38b1461041d578063f3fef3a31461043057600080fd5b8063a7cb41921461038a578063a9059cbb14610392578063c5d574fe146103a5578063d436794d146103d757600080fd5b8063947366eb116100de578063947366eb1461035357806395d89b411461036657806396c82e571461036e578063a457c2d71461037757600080fd5b80637b103999146103015780638da5cb5b1461032c578063932a1e5e1461033d57600080fd5b8063313ce5671161017157806347e7ef241161014b57806347e7ef24146102aa5780636a7b9364146102bd57806370a08231146102d0578063715018a6146102f957600080fd5b8063313ce56714610275578063371cc72514610284578063395093511461029757600080fd5b80630f4f71bb116101ad5780630f4f71bb1461022a57806318160ddd1461023d57806323b872dd1461024f578063305f42791461026257600080fd5b806304edb620146101d457806306fdde03146101e9578063095ea7b314610207575b600080fd5b6101e76101e236600461281f565b610443565b005b6101f161054d565b6040516101fe91906128c0565b60405180910390f35b61021a610215366004612908565b6105df565b60405190151581526020016101fe565b6101e7610238366004612934565b6105f7565b6035545b6040519081526020016101fe565b61021a61025d36600461294d565b61062d565b6101e7610270366004612934565b610653565b604051601281526020016101fe565b6101e76102923660046129d7565b61081b565b61021a6102a5366004612908565b610b16565b6101e76102b8366004612908565b610b38565b6102416102cb366004612934565b610d45565b6102416102de366004612ab6565b6001600160a01b031660009081526033602052604090205490565b6101e7610d82565b600054610314906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6065546001600160a01b0316610314565b610345610db8565b6040516101fe929190612ad3565b6101e7610361366004612b29565b610e76565b6101f1611015565b61024160985481565b61021a610385366004612908565b611024565b6101e76110aa565b61021a6103a0366004612908565b61117a565b6103b86103b3366004612934565b611188565b604080516001600160a01b0390931683526020830191909152016101fe565b6103ea6103e5366004612934565b6111c0565b6040516101fe9190612b76565b610241610405366004612bc3565b6111f7565b6101e7610418366004612c43565b611222565b6101e761042b366004612ab6565b61141b565b61024161043e366004612908565b6114b3565b6065546001600160a01b031633146104765760405162461bcd60e51b815260040161046d90612c9b565b60405180910390fd5b60975481146104c05760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840eecad2ced0e8e640d8cadccee8d60531b604482015260640161046d565b6000805b82811015610545578383828181106104de576104de612cd0565b90506020020135609782815481106104f8576104f8612cd0565b90600052602060002090600202016001018190555083838281811061051f5761051f612cd0565b90506020020135826105319190612cfc565b91508061053d81612d14565b9150506104c4565b506098555050565b60606036805461055c90612d2d565b80601f016020809104026020016040519081016040528092919081815260200182805461058890612d2d565b80156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b5050505050905090565b6000336105ed818585611645565b5060019392505050565b6065546001600160a01b031633146106215760405162461bcd60e51b815260040161046d90612c9b565b61062a8161176a565b50565b60003361063b858285611907565b61064685858561197b565b60019150505b9392505050565b6065546001600160a01b0316331461067d5760405162461bcd60e51b815260040161046d90612c9b565b6097818154811061069057610690612cd0565b906000526020600020906002020160010154609860008282546106b39190612d67565b925050819055506000609782815481106106cf576106cf612cd0565b9060005260206000209060020201600101819055506106ed8161176a565b7fed5e577ab42e81a8ad225f92e34f66b2a12c5c4afe112a2b247a5892a9c451aa6097828154811061072157610721612cd0565b90600052602060002090600202018260405161075d92919082546001600160a01b03168152600192909201546020830152604082015260600190565b60405180910390a16097805461077590600190612d67565b8154811061078557610785612cd0565b9060005260206000209060020201609782815481106107a6576107a6612cd0565b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b0390921691909117815560019182015491015560978054806107ef576107ef612d7e565b60008281526020812060026000199093019283020180546001600160a01b031916815560010155905550565b60006108276001611b49565b90508015610843576000805460ff60a81b1916600160a81b1790555b61084b611be4565b6108be88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250611c1592505050565b336001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190612d94565b600080546001600160a01b0319166001600160a01b03929092169190911790556109498461141b565b6000805b83811015610ac057600080546001600160a01b0316638b3f14f087878581811061097957610979612cd0565b61098f9260206040909202019081019150612ab6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190612d94565b6001600160a01b031603610a415760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d1959081d985d5b1d607a1b604482015260640161046d565b6097858583818110610a5557610a55612cd0565b835460018101855560009485526020909420604090910292909201926002029091019050610a838282612db1565b5050848482818110610a9757610a97612cd0565b9050604002016020013582610aac9190612cfc565b915080610ab881612d14565b91505061094d565b506098558015610b0c576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000336105ed818585610b2983836111f7565b610b339190612cfc565b611645565b60005460405163b5af090f60e01b81526001600160a01b0384811660048301529091169063b5af090f90602401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190612de7565b610be95760405162461bcd60e51b81526020600482015260146024820152732ab739bab83837b93a32b2103a37b5b2b71034b760611b604482015260640161046d565b6000610bf3610db8565b9150610c0c90506001600160a01b038416333085611c4c565b6000805b609754811015610cb657610c9860978281548110610c3057610c30612cd0565b906000526020600020906002020160000160009054906101000a90046001600160a01b03168660985460978581548110610c6c57610c6c612cd0565b90600052602060002090600202016001015488610c899190612e04565b610c939190612e23565b611cb7565b610ca29083612cfc565b915080610cae81612d14565b915050610c10565b5081600003610cce57610cc93382611dcb565b610cf6565b610cf6338383610cdd60355490565b610ce79190612e04565b610cf19190612e23565b611dcb565b604080513381526001600160a01b03861660208201529081018490527f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060600160405180910390a150505050565b6000610d7c60978381548110610d5d57610d5d612cd0565b60009182526020909120600290910201546001600160a01b0316611eaa565b92915050565b6065546001600160a01b03163314610dac5760405162461bcd60e51b815260040161046d90612c9b565b610db66000611f97565b565b60975460609060009067ffffffffffffffff811115610dd957610dd9612bfc565b604051908082528060200260200182016040528015610e02578160200160208202803683370190505b50915060005b8251811015610e7157610e1a81610d45565b838281518110610e2c57610e2c612cd0565b602002602001018181525050828181518110610e4a57610e4a612cd0565b602002602001015182610e5d9190612cfc565b915080610e6981612d14565b915050610e08565b509091565b6065546001600160a01b03163314610ea05760405162461bcd60e51b815260040161046d90612c9b565b610eac85858585611fe9565b801561100e57600080610ebd610db8565b91509150600060978881548110610ed657610ed6612cd0565b90600052602060002090600202019050600060978881548110610efb57610efb612cd0565b906000526020600020906002020190506000848981518110610f1f57610f1f612cd0565b6020026020010151858b81518110610f3957610f39612cd0565b602002602001015185610f4c9190612d67565b610f569190612d67565b9050600082600101548460010154609854610f719190612d67565b610f7b9190612d67565b905081868c81518110610f9057610f90612cd0565b602002602001015182610fa39190612e04565b610fad9190612e23565b846001018190555081868b81518110610fc857610fc8612cd0565b602002602001015182610fdb9190612e04565b610fe59190612e23565b6001808501829055850154610ffa9083612cfc565b6110049190612cfc565b6098555050505050505b5050505050565b60606037805461055c90612d2d565b6000338161103282866111f7565b9050838110156110925760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161046d565b61109f8286868403611645565b506001949350505050565b6065546001600160a01b031633146110d45760405162461bcd60e51b815260040161046d90612c9b565b6000806110df610db8565b9092509050633b9aca006000805b84518110156111715760008486838151811061110b5761110b612cd0565b60200260200101518561111e9190612e04565b6111289190612e23565b90506111348184612cfc565b9250806097838154811061114a5761114a612cd0565b6000918252602090912060016002909202010155508061116981612d14565b9150506110ed565b50609855505050565b6000336105ed81858561197b565b6097818154811061119857600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6060610d7c609783815481106111d8576111d8612cd0565b60009182526020909120600290910201546001600160a01b031661208c565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6065546001600160a01b0316331461124c5760405162461bcd60e51b815260040161046d90612c9b565b6000805482516040516308b3f14f60e41b81526001600160a01b039182166004820152911690638b3f14f090602401602060405180830381865afa158015611298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bc9190612d94565b6001600160a01b0316036113065760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d1959081d985d5b1d607a1b604482015260640161046d565b60978054600181018255600091825282517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9600290920291820180546001600160a01b0319166001600160a01b0390921691909117905560208301517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffa909101819055609880549192909161139c908490612cfc565b90915550506097546113b9906113b490600190612d67565b61176a565b6097547f73edde8f56b9fcbdb5ccd6ea953f2d9710054e59208ebe94fcddb86321012c029082906113ec90600190612d67565b6040805183516001600160a01b031681526020938401519381019390935282015260600160405180910390a150565b6065546001600160a01b031633146114455760405162461bcd60e51b815260040161046d90612c9b565b6001600160a01b0381166114aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046d565b61062a81611f97565b6000805460405163b5af090f60e01b81526001600160a01b0385811660048301529091169063b5af090f90602401602060405180830381865afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115229190612de7565b6115665760405162461bcd60e51b8152602060048201526015602482015274155b9cdd5c1c1bdc9d1959081d1bdad95b881bdd5d605a1b604482015260640161046d565b600061157160355490565b905061157d338461216f565b60005b6097548110156115e0576115c2609782815481106115a0576115a0612cd0565b60009182526020909120600290910201546001600160a01b03168686856122ba565b6115cc9084612cfc565b9250806115d881612d14565b915050611580565b506115f56001600160a01b0385163384612398565b604080513381526001600160a01b03861660208201529081018390527f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060600160405180910390a15092915050565b6001600160a01b0383166116a75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161046d565b6001600160a01b0382166117085760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161046d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080611775610db8565b9150915060006098546097858154811061179157611791612cd0565b906000526020600020906002020160010154836117ae9190612e04565b6117b89190612e23565b90508284815181106117cc576117cc612cd0565b60200260200101518111156118675760008385815181106117ef576117ef612cd0565b6020026020010151826118029190612d67565b9050600084868151811061181857611818612cd0565b60200260200101518461182b9190612d67565b905060005b60975481101561185f5786811461184d5761184d81888585611fe9565b8061185781612d14565b915050611830565b505050611901565b82848151811061187957611879612cd0565b60200260200101518261188c9190612d67565b915060005b60975481101561100e578481146118ef576118c785828684815181106118b9576118b9612cd0565b602002602001015186611fe9565b8381815181106118d9576118d9612cd0565b6020026020010151836118ec9190612d67565b92505b806118f981612d14565b915050611891565b50505050565b600061191384846111f7565b90506000198114611901578181101561196e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161046d565b6119018484848403611645565b6001600160a01b0383166119df5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161046d565b6001600160a01b038216611a415760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161046d565b6001600160a01b03831660009081526033602052604090205481811015611ab95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161046d565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611af0908490612cfc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b3c91815260200190565b60405180910390a3611901565b60008054600160a81b900460ff1615611b92578160ff166001148015611b6e5750303b155b611b8a5760405162461bcd60e51b815260040161046d90612e45565b506000919050565b60005460ff808416600160a01b9092041610611bc05760405162461bcd60e51b815260040161046d90612e45565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b600054600160a81b900460ff16611c0d5760405162461bcd60e51b815260040161046d90612e93565b610db66123c8565b600054600160a81b900460ff16611c3e5760405162461bcd60e51b815260040161046d90612e93565b611c4882826123fa565b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526119019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261244a565b600080546040516308b3f14f60e41b81526001600160a01b03868116600483015283921690638b3f14f090602401602060405180830381865afa158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d269190612d94565b600080546040516001600160a01b039182166024820152888216604482015290871660648201526084810186905291925090611dab90630284c3f560e01b9060a4015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b0384169061251c565b905080806020019051810190611dc19190612ede565b9695505050505050565b6001600160a01b038216611e215760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161046d565b8060356000828254611e339190612cfc565b90915550506001600160a01b03821660009081526033602052604081208054839290611e60908490612cfc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080546040516308b3f14f60e41b81526001600160a01b03848116600483015283921690638b3f14f090602401602060405180830381865afa158015611ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f199190612d94565b600054604051631c40341760e21b81526001600160a01b0391821660048201528582166024820152306044820152919250821690637100d05c90606401602060405180830381865afa158015611f73573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190612ede565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611ff4846111c0565b60008151811061200657612006612cd0565b60200260200101519050600061204a6097878154811061202857612028612cd0565b60009182526020909120600290910201546001600160a01b03168386866122ba565b90506120836097868154811061206257612062612cd0565b60009182526020909120600290910201546001600160a01b03168383611cb7565b50505050505050565b600080546040516308b3f14f60e41b81526001600160a01b038481166004830152606093921690638b3f14f090602401602060405180830381865afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd9190612d94565b604051634e89a71160e01b81526001600160a01b03858116600483015291925090821690634e89a71190602401600060405180830381865afa158015612147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261064c9190810190612ef7565b6001600160a01b0382166121cf5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161046d565b6001600160a01b038216600090815260336020526040902054818110156122435760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161046d565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612272908490612d67565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161175d565b505050565b600080546040516308b3f14f60e41b81526001600160a01b03878116600483015283921690638b3f14f090602401602060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190612d94565b600080546040516001600160a01b039182166024820152898216604482015290881660648201526084810187905260a48101869052919250906123779063097da6d360e41b9060c401611d69565b90508080602001905181019061238d9190612ede565b979650505050505050565b6040516001600160a01b0383166024820152604481018290526122b590849063a9059cbb60e01b90606401611c80565b600054600160a81b900460ff166123f15760405162461bcd60e51b815260040161046d90612e93565b610db633611f97565b600054600160a81b900460ff166124235760405162461bcd60e51b815260040161046d90612e93565b8151612436906036906020850190612786565b5080516122b5906037906020840190612786565b600061249f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125419092919063ffffffff16565b8051909150156122b557808060200190518101906124bd9190612de7565b6122b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046d565b606061064c8383604051806060016040528060278152602001612fc660279139612558565b6060612550848460008561262b565b949350505050565b60606001600160a01b0384163b6125c05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161046d565b600080856001600160a01b0316856040516125db9190612fa9565b600060405180830381855af49150503d8060008114612616576040519150601f19603f3d011682016040523d82523d6000602084013e61261b565b606091505b5091509150611dc182828661274d565b60608247101561268c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046d565b6001600160a01b0385163b6126e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b600080866001600160a01b031685876040516126ff9190612fa9565b60006040518083038185875af1925050503d806000811461273c576040519150601f19603f3d011682016040523d82523d6000602084013e612741565b606091505b509150915061238d8282865b6060831561275c57508161064c565b82511561276c5782518084602001fd5b8160405162461bcd60e51b815260040161046d91906128c0565b82805461279290612d2d565b90600052602060002090601f0160209004810192826127b457600085556127fa565b82601f106127cd57805160ff19168380011785556127fa565b828001600101855582156127fa579182015b828111156127fa5782518255916020019190600101906127df565b5061280692915061280a565b5090565b5b80821115612806576000815560010161280b565b6000806020838503121561283257600080fd5b823567ffffffffffffffff8082111561284a57600080fd5b818501915085601f83011261285e57600080fd5b81358181111561286d57600080fd5b8660208260051b850101111561288257600080fd5b60209290920196919550909350505050565b60005b838110156128af578181015183820152602001612897565b838111156119015750506000910152565b60208152600082518060208401526128df816040850160208701612894565b601f01601f19169190910160400192915050565b6001600160a01b038116811461062a57600080fd5b6000806040838503121561291b57600080fd5b8235612926816128f3565b946020939093013593505050565b60006020828403121561294657600080fd5b5035919050565b60008060006060848603121561296257600080fd5b833561296d816128f3565b9250602084013561297d816128f3565b929592945050506040919091013590565b60008083601f8401126129a057600080fd5b50813567ffffffffffffffff8111156129b857600080fd5b6020830191508360208285010111156129d057600080fd5b9250929050565b60008060008060008060006080888a0312156129f257600080fd5b873567ffffffffffffffff80821115612a0a57600080fd5b612a168b838c0161298e565b909950975060208a0135915080821115612a2f57600080fd5b612a3b8b838c0161298e565b909750955060408a01359150612a50826128f3565b90935060608901359080821115612a6657600080fd5b818a0191508a601f830112612a7a57600080fd5b813581811115612a8957600080fd5b8b60208260061b8501011115612a9e57600080fd5b60208301945080935050505092959891949750929550565b600060208284031215612ac857600080fd5b813561064c816128f3565b604080825283519082018190526000906020906060840190828701845b82811015612b0c57815184529284019290840190600101612af0565b50505092019290925292915050565b801515811461062a57600080fd5b600080600080600060a08688031215612b4157600080fd5b853594506020860135935060408601359250606086013591506080860135612b6881612b1b565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015612bb75783516001600160a01b031683529284019291840191600101612b92565b50909695505050505050565b60008060408385031215612bd657600080fd5b8235612be1816128f3565b91506020830135612bf1816128f3565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c3b57612c3b612bfc565b604052919050565b600060408284031215612c5557600080fd5b6040516040810181811067ffffffffffffffff82111715612c7857612c78612bfc565b6040528235612c86816128f3565b81526020928301359281019290925250919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612d0f57612d0f612ce6565b500190565b600060018201612d2657612d26612ce6565b5060010190565b600181811c90821680612d4157607f821691505b602082108103612d6157634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015612d7957612d79612ce6565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612da657600080fd5b815161064c816128f3565b8135612dbc816128f3565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b600060208284031215612df957600080fd5b815161064c81612b1b565b6000816000190483118215151615612e1e57612e1e612ce6565b500290565b600082612e4057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612ef057600080fd5b5051919050565b60006020808385031215612f0a57600080fd5b825167ffffffffffffffff80821115612f2257600080fd5b818501915085601f830112612f3657600080fd5b815181811115612f4857612f48612bfc565b8060051b9150612f59848301612c12565b8181529183018401918481019088841115612f7357600080fd5b938501935b83851015612f9d5784519250612f8d836128f3565b8282529385019390850190612f78565b98975050505050505050565b60008251612fbb818460208701612894565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200330163af0e2fe70573a4c3727c7500c175c40ec1b613c3ea1e89ef0c3c5d76064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637b10399911610104578063a7cb4192116100a2578063dd62ed3e11610071578063dd62ed3e146103f7578063f0d175cb1461040a578063f2fde38b1461041d578063f3fef3a31461043057600080fd5b8063a7cb41921461038a578063a9059cbb14610392578063c5d574fe146103a5578063d436794d146103d757600080fd5b8063947366eb116100de578063947366eb1461035357806395d89b411461036657806396c82e571461036e578063a457c2d71461037757600080fd5b80637b103999146103015780638da5cb5b1461032c578063932a1e5e1461033d57600080fd5b8063313ce5671161017157806347e7ef241161014b57806347e7ef24146102aa5780636a7b9364146102bd57806370a08231146102d0578063715018a6146102f957600080fd5b8063313ce56714610275578063371cc72514610284578063395093511461029757600080fd5b80630f4f71bb116101ad5780630f4f71bb1461022a57806318160ddd1461023d57806323b872dd1461024f578063305f42791461026257600080fd5b806304edb620146101d457806306fdde03146101e9578063095ea7b314610207575b600080fd5b6101e76101e236600461281f565b610443565b005b6101f161054d565b6040516101fe91906128c0565b60405180910390f35b61021a610215366004612908565b6105df565b60405190151581526020016101fe565b6101e7610238366004612934565b6105f7565b6035545b6040519081526020016101fe565b61021a61025d36600461294d565b61062d565b6101e7610270366004612934565b610653565b604051601281526020016101fe565b6101e76102923660046129d7565b61081b565b61021a6102a5366004612908565b610b16565b6101e76102b8366004612908565b610b38565b6102416102cb366004612934565b610d45565b6102416102de366004612ab6565b6001600160a01b031660009081526033602052604090205490565b6101e7610d82565b600054610314906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6065546001600160a01b0316610314565b610345610db8565b6040516101fe929190612ad3565b6101e7610361366004612b29565b610e76565b6101f1611015565b61024160985481565b61021a610385366004612908565b611024565b6101e76110aa565b61021a6103a0366004612908565b61117a565b6103b86103b3366004612934565b611188565b604080516001600160a01b0390931683526020830191909152016101fe565b6103ea6103e5366004612934565b6111c0565b6040516101fe9190612b76565b610241610405366004612bc3565b6111f7565b6101e7610418366004612c43565b611222565b6101e761042b366004612ab6565b61141b565b61024161043e366004612908565b6114b3565b6065546001600160a01b031633146104765760405162461bcd60e51b815260040161046d90612c9b565b60405180910390fd5b60975481146104c05760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840eecad2ced0e8e640d8cadccee8d60531b604482015260640161046d565b6000805b82811015610545578383828181106104de576104de612cd0565b90506020020135609782815481106104f8576104f8612cd0565b90600052602060002090600202016001018190555083838281811061051f5761051f612cd0565b90506020020135826105319190612cfc565b91508061053d81612d14565b9150506104c4565b506098555050565b60606036805461055c90612d2d565b80601f016020809104026020016040519081016040528092919081815260200182805461058890612d2d565b80156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b5050505050905090565b6000336105ed818585611645565b5060019392505050565b6065546001600160a01b031633146106215760405162461bcd60e51b815260040161046d90612c9b565b61062a8161176a565b50565b60003361063b858285611907565b61064685858561197b565b60019150505b9392505050565b6065546001600160a01b0316331461067d5760405162461bcd60e51b815260040161046d90612c9b565b6097818154811061069057610690612cd0565b906000526020600020906002020160010154609860008282546106b39190612d67565b925050819055506000609782815481106106cf576106cf612cd0565b9060005260206000209060020201600101819055506106ed8161176a565b7fed5e577ab42e81a8ad225f92e34f66b2a12c5c4afe112a2b247a5892a9c451aa6097828154811061072157610721612cd0565b90600052602060002090600202018260405161075d92919082546001600160a01b03168152600192909201546020830152604082015260600190565b60405180910390a16097805461077590600190612d67565b8154811061078557610785612cd0565b9060005260206000209060020201609782815481106107a6576107a6612cd0565b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b0390921691909117815560019182015491015560978054806107ef576107ef612d7e565b60008281526020812060026000199093019283020180546001600160a01b031916815560010155905550565b60006108276001611b49565b90508015610843576000805460ff60a81b1916600160a81b1790555b61084b611be4565b6108be88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250611c1592505050565b336001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190612d94565b600080546001600160a01b0319166001600160a01b03929092169190911790556109498461141b565b6000805b83811015610ac057600080546001600160a01b0316638b3f14f087878581811061097957610979612cd0565b61098f9260206040909202019081019150612ab6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190612d94565b6001600160a01b031603610a415760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d1959081d985d5b1d607a1b604482015260640161046d565b6097858583818110610a5557610a55612cd0565b835460018101855560009485526020909420604090910292909201926002029091019050610a838282612db1565b5050848482818110610a9757610a97612cd0565b9050604002016020013582610aac9190612cfc565b915080610ab881612d14565b91505061094d565b506098558015610b0c576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000336105ed818585610b2983836111f7565b610b339190612cfc565b611645565b60005460405163b5af090f60e01b81526001600160a01b0384811660048301529091169063b5af090f90602401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190612de7565b610be95760405162461bcd60e51b81526020600482015260146024820152732ab739bab83837b93a32b2103a37b5b2b71034b760611b604482015260640161046d565b6000610bf3610db8565b9150610c0c90506001600160a01b038416333085611c4c565b6000805b609754811015610cb657610c9860978281548110610c3057610c30612cd0565b906000526020600020906002020160000160009054906101000a90046001600160a01b03168660985460978581548110610c6c57610c6c612cd0565b90600052602060002090600202016001015488610c899190612e04565b610c939190612e23565b611cb7565b610ca29083612cfc565b915080610cae81612d14565b915050610c10565b5081600003610cce57610cc93382611dcb565b610cf6565b610cf6338383610cdd60355490565b610ce79190612e04565b610cf19190612e23565b611dcb565b604080513381526001600160a01b03861660208201529081018490527f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060600160405180910390a150505050565b6000610d7c60978381548110610d5d57610d5d612cd0565b60009182526020909120600290910201546001600160a01b0316611eaa565b92915050565b6065546001600160a01b03163314610dac5760405162461bcd60e51b815260040161046d90612c9b565b610db66000611f97565b565b60975460609060009067ffffffffffffffff811115610dd957610dd9612bfc565b604051908082528060200260200182016040528015610e02578160200160208202803683370190505b50915060005b8251811015610e7157610e1a81610d45565b838281518110610e2c57610e2c612cd0565b602002602001018181525050828181518110610e4a57610e4a612cd0565b602002602001015182610e5d9190612cfc565b915080610e6981612d14565b915050610e08565b509091565b6065546001600160a01b03163314610ea05760405162461bcd60e51b815260040161046d90612c9b565b610eac85858585611fe9565b801561100e57600080610ebd610db8565b91509150600060978881548110610ed657610ed6612cd0565b90600052602060002090600202019050600060978881548110610efb57610efb612cd0565b906000526020600020906002020190506000848981518110610f1f57610f1f612cd0565b6020026020010151858b81518110610f3957610f39612cd0565b602002602001015185610f4c9190612d67565b610f569190612d67565b9050600082600101548460010154609854610f719190612d67565b610f7b9190612d67565b905081868c81518110610f9057610f90612cd0565b602002602001015182610fa39190612e04565b610fad9190612e23565b846001018190555081868b81518110610fc857610fc8612cd0565b602002602001015182610fdb9190612e04565b610fe59190612e23565b6001808501829055850154610ffa9083612cfc565b6110049190612cfc565b6098555050505050505b5050505050565b60606037805461055c90612d2d565b6000338161103282866111f7565b9050838110156110925760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161046d565b61109f8286868403611645565b506001949350505050565b6065546001600160a01b031633146110d45760405162461bcd60e51b815260040161046d90612c9b565b6000806110df610db8565b9092509050633b9aca006000805b84518110156111715760008486838151811061110b5761110b612cd0565b60200260200101518561111e9190612e04565b6111289190612e23565b90506111348184612cfc565b9250806097838154811061114a5761114a612cd0565b6000918252602090912060016002909202010155508061116981612d14565b9150506110ed565b50609855505050565b6000336105ed81858561197b565b6097818154811061119857600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6060610d7c609783815481106111d8576111d8612cd0565b60009182526020909120600290910201546001600160a01b031661208c565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6065546001600160a01b0316331461124c5760405162461bcd60e51b815260040161046d90612c9b565b6000805482516040516308b3f14f60e41b81526001600160a01b039182166004820152911690638b3f14f090602401602060405180830381865afa158015611298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bc9190612d94565b6001600160a01b0316036113065760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d1959081d985d5b1d607a1b604482015260640161046d565b60978054600181018255600091825282517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9600290920291820180546001600160a01b0319166001600160a01b0390921691909117905560208301517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffa909101819055609880549192909161139c908490612cfc565b90915550506097546113b9906113b490600190612d67565b61176a565b6097547f73edde8f56b9fcbdb5ccd6ea953f2d9710054e59208ebe94fcddb86321012c029082906113ec90600190612d67565b6040805183516001600160a01b031681526020938401519381019390935282015260600160405180910390a150565b6065546001600160a01b031633146114455760405162461bcd60e51b815260040161046d90612c9b565b6001600160a01b0381166114aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046d565b61062a81611f97565b6000805460405163b5af090f60e01b81526001600160a01b0385811660048301529091169063b5af090f90602401602060405180830381865afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115229190612de7565b6115665760405162461bcd60e51b8152602060048201526015602482015274155b9cdd5c1c1bdc9d1959081d1bdad95b881bdd5d605a1b604482015260640161046d565b600061157160355490565b905061157d338461216f565b60005b6097548110156115e0576115c2609782815481106115a0576115a0612cd0565b60009182526020909120600290910201546001600160a01b03168686856122ba565b6115cc9084612cfc565b9250806115d881612d14565b915050611580565b506115f56001600160a01b0385163384612398565b604080513381526001600160a01b03861660208201529081018390527f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060600160405180910390a15092915050565b6001600160a01b0383166116a75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161046d565b6001600160a01b0382166117085760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161046d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080611775610db8565b9150915060006098546097858154811061179157611791612cd0565b906000526020600020906002020160010154836117ae9190612e04565b6117b89190612e23565b90508284815181106117cc576117cc612cd0565b60200260200101518111156118675760008385815181106117ef576117ef612cd0565b6020026020010151826118029190612d67565b9050600084868151811061181857611818612cd0565b60200260200101518461182b9190612d67565b905060005b60975481101561185f5786811461184d5761184d81888585611fe9565b8061185781612d14565b915050611830565b505050611901565b82848151811061187957611879612cd0565b60200260200101518261188c9190612d67565b915060005b60975481101561100e578481146118ef576118c785828684815181106118b9576118b9612cd0565b602002602001015186611fe9565b8381815181106118d9576118d9612cd0565b6020026020010151836118ec9190612d67565b92505b806118f981612d14565b915050611891565b50505050565b600061191384846111f7565b90506000198114611901578181101561196e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161046d565b6119018484848403611645565b6001600160a01b0383166119df5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161046d565b6001600160a01b038216611a415760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161046d565b6001600160a01b03831660009081526033602052604090205481811015611ab95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161046d565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611af0908490612cfc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b3c91815260200190565b60405180910390a3611901565b60008054600160a81b900460ff1615611b92578160ff166001148015611b6e5750303b155b611b8a5760405162461bcd60e51b815260040161046d90612e45565b506000919050565b60005460ff808416600160a01b9092041610611bc05760405162461bcd60e51b815260040161046d90612e45565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b600054600160a81b900460ff16611c0d5760405162461bcd60e51b815260040161046d90612e93565b610db66123c8565b600054600160a81b900460ff16611c3e5760405162461bcd60e51b815260040161046d90612e93565b611c4882826123fa565b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526119019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261244a565b600080546040516308b3f14f60e41b81526001600160a01b03868116600483015283921690638b3f14f090602401602060405180830381865afa158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d269190612d94565b600080546040516001600160a01b039182166024820152888216604482015290871660648201526084810186905291925090611dab90630284c3f560e01b9060a4015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b0384169061251c565b905080806020019051810190611dc19190612ede565b9695505050505050565b6001600160a01b038216611e215760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161046d565b8060356000828254611e339190612cfc565b90915550506001600160a01b03821660009081526033602052604081208054839290611e60908490612cfc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080546040516308b3f14f60e41b81526001600160a01b03848116600483015283921690638b3f14f090602401602060405180830381865afa158015611ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f199190612d94565b600054604051631c40341760e21b81526001600160a01b0391821660048201528582166024820152306044820152919250821690637100d05c90606401602060405180830381865afa158015611f73573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190612ede565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611ff4846111c0565b60008151811061200657612006612cd0565b60200260200101519050600061204a6097878154811061202857612028612cd0565b60009182526020909120600290910201546001600160a01b03168386866122ba565b90506120836097868154811061206257612062612cd0565b60009182526020909120600290910201546001600160a01b03168383611cb7565b50505050505050565b600080546040516308b3f14f60e41b81526001600160a01b038481166004830152606093921690638b3f14f090602401602060405180830381865afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd9190612d94565b604051634e89a71160e01b81526001600160a01b03858116600483015291925090821690634e89a71190602401600060405180830381865afa158015612147573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261064c9190810190612ef7565b6001600160a01b0382166121cf5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161046d565b6001600160a01b038216600090815260336020526040902054818110156122435760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161046d565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612272908490612d67565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161175d565b505050565b600080546040516308b3f14f60e41b81526001600160a01b03878116600483015283921690638b3f14f090602401602060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190612d94565b600080546040516001600160a01b039182166024820152898216604482015290881660648201526084810187905260a48101869052919250906123779063097da6d360e41b9060c401611d69565b90508080602001905181019061238d9190612ede565b979650505050505050565b6040516001600160a01b0383166024820152604481018290526122b590849063a9059cbb60e01b90606401611c80565b600054600160a81b900460ff166123f15760405162461bcd60e51b815260040161046d90612e93565b610db633611f97565b600054600160a81b900460ff166124235760405162461bcd60e51b815260040161046d90612e93565b8151612436906036906020850190612786565b5080516122b5906037906020840190612786565b600061249f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125419092919063ffffffff16565b8051909150156122b557808060200190518101906124bd9190612de7565b6122b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046d565b606061064c8383604051806060016040528060278152602001612fc660279139612558565b6060612550848460008561262b565b949350505050565b60606001600160a01b0384163b6125c05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161046d565b600080856001600160a01b0316856040516125db9190612fa9565b600060405180830381855af49150503d8060008114612616576040519150601f19603f3d011682016040523d82523d6000602084013e61261b565b606091505b5091509150611dc182828661274d565b60608247101561268c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046d565b6001600160a01b0385163b6126e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b600080866001600160a01b031685876040516126ff9190612fa9565b60006040518083038185875af1925050503d806000811461273c576040519150601f19603f3d011682016040523d82523d6000602084013e612741565b606091505b509150915061238d8282865b6060831561275c57508161064c565b82511561276c5782518084602001fd5b8160405162461bcd60e51b815260040161046d91906128c0565b82805461279290612d2d565b90600052602060002090601f0160209004810192826127b457600085556127fa565b82601f106127cd57805160ff19168380011785556127fa565b828001600101855582156127fa579182015b828111156127fa5782518255916020019190600101906127df565b5061280692915061280a565b5090565b5b80821115612806576000815560010161280b565b6000806020838503121561283257600080fd5b823567ffffffffffffffff8082111561284a57600080fd5b818501915085601f83011261285e57600080fd5b81358181111561286d57600080fd5b8660208260051b850101111561288257600080fd5b60209290920196919550909350505050565b60005b838110156128af578181015183820152602001612897565b838111156119015750506000910152565b60208152600082518060208401526128df816040850160208701612894565b601f01601f19169190910160400192915050565b6001600160a01b038116811461062a57600080fd5b6000806040838503121561291b57600080fd5b8235612926816128f3565b946020939093013593505050565b60006020828403121561294657600080fd5b5035919050565b60008060006060848603121561296257600080fd5b833561296d816128f3565b9250602084013561297d816128f3565b929592945050506040919091013590565b60008083601f8401126129a057600080fd5b50813567ffffffffffffffff8111156129b857600080fd5b6020830191508360208285010111156129d057600080fd5b9250929050565b60008060008060008060006080888a0312156129f257600080fd5b873567ffffffffffffffff80821115612a0a57600080fd5b612a168b838c0161298e565b909950975060208a0135915080821115612a2f57600080fd5b612a3b8b838c0161298e565b909750955060408a01359150612a50826128f3565b90935060608901359080821115612a6657600080fd5b818a0191508a601f830112612a7a57600080fd5b813581811115612a8957600080fd5b8b60208260061b8501011115612a9e57600080fd5b60208301945080935050505092959891949750929550565b600060208284031215612ac857600080fd5b813561064c816128f3565b604080825283519082018190526000906020906060840190828701845b82811015612b0c57815184529284019290840190600101612af0565b50505092019290925292915050565b801515811461062a57600080fd5b600080600080600060a08688031215612b4157600080fd5b853594506020860135935060408601359250606086013591506080860135612b6881612b1b565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015612bb75783516001600160a01b031683529284019291840191600101612b92565b50909695505050505050565b60008060408385031215612bd657600080fd5b8235612be1816128f3565b91506020830135612bf1816128f3565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c3b57612c3b612bfc565b604052919050565b600060408284031215612c5557600080fd5b6040516040810181811067ffffffffffffffff82111715612c7857612c78612bfc565b6040528235612c86816128f3565b81526020928301359281019290925250919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612d0f57612d0f612ce6565b500190565b600060018201612d2657612d26612ce6565b5060010190565b600181811c90821680612d4157607f821691505b602082108103612d6157634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015612d7957612d79612ce6565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612da657600080fd5b815161064c816128f3565b8135612dbc816128f3565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b600060208284031215612df957600080fd5b815161064c81612b1b565b6000816000190483118215151615612e1e57612e1e612ce6565b500290565b600082612e4057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612ef057600080fd5b5051919050565b60006020808385031215612f0a57600080fd5b825167ffffffffffffffff80821115612f2257600080fd5b818501915085601f830112612f3657600080fd5b815181811115612f4857612f48612bfc565b8060051b9150612f59848301612c12565b8181529183018401918481019088841115612f7357600080fd5b938501935b83851015612f9d5784519250612f8d836128f3565b8282529385019390850190612f78565b98975050505050505050565b60008251612fbb818460208701612894565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200330163af0e2fe70573a4c3727c7500c175c40ec1b613c3ea1e89ef0c3c5d76064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5291,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRegistry)6603"
      },
      {
        "astId": 176,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 179,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1309,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 336,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 338,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 342,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 921,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 168,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5609,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "components",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_struct(Component)6611_storage)dyn_storage"
      },
      {
        "astId": 5611,
        "contract": "contracts/VaultIndex.sol:VaultIndex",
        "label": "totalWeight",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Component)6611_storage)dyn_storage": {
        "base": "t_struct(Component)6611_storage",
        "encoding": "dynamic_array",
        "label": "struct IVaultIndex.Component[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistry)6603": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Component)6611_storage": {
        "encoding": "inplace",
        "label": "struct IVaultIndex.Component",
        "members": [
          {
            "astId": 6608,
            "contract": "contracts/VaultIndex.sol:VaultIndex",
            "label": "vault",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6610,
            "contract": "contracts/VaultIndex.sol:VaultIndex",
            "label": "targetWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}