{
  "address": "0x8CCad68dE64186e4E4Fa5FEf7B78223640AD3682",
  "abi": [
    {
      "inputs": [],
      "name": "PIPELINE_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getUnderlying",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareDenom",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13f0a577cf718950d6a8c0a6ddbe766c48c10109e4b2a260444a5aba8f27c60a",
  "receipt": {
    "to": null,
    "from": "0x90A4a90e6FAf88c4d709F666D26793F9e2B47183",
    "contractAddress": "0x8CCad68dE64186e4E4Fa5FEf7B78223640AD3682",
    "transactionIndex": 22,
    "gasUsed": "1255872",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0001beaa000009982787e48c6692c2f15c2fe5905dccd9ccfca0227a192a4836",
    "transactionHash": "0x13f0a577cf718950d6a8c0a6ddbe766c48c10109e4b2a260444a5aba8f27c60a",
    "logs": [],
    "blockNumber": 38652408,
    "cumulativeGasUsed": "2719677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d3a545f609135317a3bfe4c2cf817d7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PIPELINE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareDenom\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pipelines/YearnSingleTokenPipeline.sol\":\"YearnSingleTokenPipeline\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/IPipeline.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRegistry.sol\\\";\\n\\ninterface IPipeline {\\n    // MUTATIVE FUNCTIONS\\n\\n    function deposit(\\n        IRegistry registry,\\n        address vault,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external returns (uint256 price);\\n\\n    function withdraw(\\n        IRegistry registry,\\n        address vault,\\n        address tokenOut,\\n        uint256 shareNum,\\n        uint256 shareDenom\\n    ) external returns (uint256 amountOut);\\n\\n    // VIEW FUNCTIONS\\n\\n    function getUnderlying(address vault)\\n        external\\n        view\\n        returns (address[] memory tokens);\\n\\n    function getPrice(\\n        IRegistry registry,\\n        address vault,\\n        address account\\n    ) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xcbcabeff698bed3868d7b86cde2ed7d334176d76b9285c3b5304275959494a40\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IRegistry {\\n    function getVaultPipeline(address vault) external view returns (address);\\n\\n    function getPipelineData(bytes32 slot) external view returns (bytes memory);\\n\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    function getPriceFeed(address token) external view returns (address);\\n\\n    enum SwapType {\\n        None,\\n        UniswapV2\\n    }\\n\\n    struct SwapData {\\n        SwapType swapType;\\n        bytes data;\\n    }\\n\\n    function getSwapData(address from, address to)\\n        external\\n        view\\n        returns (SwapData memory);\\n\\n    function defaultUniswapV2Router() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2185dafb351be452a94fb4e04b2275f2a200ab90a89444d0bde4eb5fb514b8f2\",\"license\":\"MIT\"},\"contracts/interfaces/yearn/IYearnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IYearnVault is IERC20Metadata {\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function totalAssets() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x97dbc3b62496cbf902f4fe9d67d9870882d33d4553da23acd7c8c6b73b18ed0b\",\"license\":\"MIT\"},\"contracts/libraries/Prices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\n\\nlibrary Prices {\\n    using SafeCast for int256;\\n\\n    uint256 internal constant ONE = 10**8;\\n\\n    function getPrice(IRegistry registry, address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        AggregatorV3Interface feed = AggregatorV3Interface(\\n            registry.getPriceFeed(token)\\n        );\\n        if (address(feed) != address(0)) {\\n            (, int256 price, , , ) = feed.latestRoundData();\\n            if (price < 0) {\\n                return 0;\\n            }\\n            return price.toUint256();\\n        } else {\\n            // For now assume all tokens cost 1 USD (i.e. stablecoins)\\n            return ONE;\\n        }\\n    }\\n\\n    function toUSD(\\n        IRegistry registry,\\n        address token,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        return\\n            (amount * getPrice(registry, token)) /\\n            10**IERC20Metadata(token).decimals();\\n    }\\n}\\n\",\"keccak256\":\"0xe486778cf56317e68d6a6eea9193d6c77335c599d38ccf067e5b5100962eb3e3\",\"license\":\"MIT\"},\"contracts/libraries/Swaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\n\\nlibrary Swaps {\\n    function swap(\\n        IRegistry registry,\\n        address from,\\n        address to,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        IRegistry.SwapData memory swapData = registry.getSwapData(from, to);\\n        if (swapData.swapType == IRegistry.SwapType.UniswapV2) {\\n            // TODO: Get data and perform uniswap swap\\n        } else {\\n            // Perform default swap\\n            amountOut = defaultUniV2Swap(\\n                registry.defaultUniswapV2Router(),\\n                from,\\n                to,\\n                amountIn\\n            );\\n        }\\n    }\\n\\n    function defaultUniV2Swap(\\n        address router,\\n        address from,\\n        address to,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Try direct swap first\\n        address[] memory directPath = new address[](2);\\n        (directPath[0], directPath[1]) = (from, to);\\n        uint256 directAmountOut;\\n        try\\n            IUniswapV2Router02(router).getAmountsOut(amountIn, directPath)\\n        returns (uint256[] memory amountsOut) {\\n            directAmountOut = amountsOut[amountsOut.length - 1];\\n        } catch {\\n            // Do nothing\\n        }\\n\\n        // Try swap using WETH\\n        uint256 wethAmountOut;\\n        address[] memory wethPath = new address[](3);\\n        address weth = IUniswapV2Router02(router).WETH();\\n        if (from != weth && to != weth) {\\n            (wethPath[0], wethPath[1], wethPath[2]) = (from, weth, to);\\n            try\\n                IUniswapV2Router02(router).getAmountsOut(amountIn, wethPath)\\n            returns (uint256[] memory amountsOut) {\\n                wethAmountOut = amountsOut[amountsOut.length - 1];\\n            } catch {\\n                // Do nothing\\n            }\\n        }\\n\\n        // Perform swap\\n        require(\\n            directAmountOut > 0 || wethAmountOut > 0,\\n            \\\"No swap route available\\\"\\n        );\\n        amountOut = uniV2Swap(\\n            router,\\n            directAmountOut > wethAmountOut ? directPath : wethPath,\\n            amountIn\\n        );\\n    }\\n\\n    function uniV2Swap(\\n        address router,\\n        address[] memory path,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(path[0]).approve(router, amountIn);\\n        uint256[] memory amounts = IUniswapV2Router02(router)\\n            .swapExactTokensForTokens(\\n                amountIn,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        amountOut = amounts[amounts.length - 1];\\n        require(amountOut > 0, \\\"Can't swap for zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd23039a3f4b012e577da38b0bd2590fa80208bfd18fcccbcb5e3483a6dbc8376\",\"license\":\"MIT\"},\"contracts/pipelines/YearnSingleTokenPipeline.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/Swaps.sol\\\";\\nimport \\\"../libraries/Prices.sol\\\";\\nimport \\\"../interfaces/IPipeline.sol\\\";\\nimport \\\"../interfaces/yearn/IYearnVault.sol\\\";\\n\\ncontract YearnSingleTokenPipeline is IPipeline {\\n    using Swaps for IRegistry;\\n    using Prices for IRegistry;\\n\\n    string public constant PIPELINE_NAME = \\\"YearnSingleTokenPipline\\\";\\n\\n    // MUTATIVE FUNCTIONS\\n\\n    function deposit(\\n        IRegistry registry,\\n        address vault,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external override returns (uint256 price) {\\n        address underlying = IYearnVault(vault).token();\\n\\n        uint256 supplyAmount;\\n        if (tokenIn != underlying) {\\n            supplyAmount = registry.swap(tokenIn, underlying, amountIn);\\n        } else {\\n            supplyAmount = amountIn;\\n        }\\n\\n        IERC20(underlying).approve(vault, supplyAmount);\\n        IYearnVault(vault).deposit(supplyAmount);\\n\\n        price = registry.toUSD(underlying, supplyAmount);\\n    }\\n\\n    function withdraw(\\n        IRegistry registry,\\n        address vault,\\n        address tokenOut,\\n        uint256 shareNum,\\n        uint256 shareDenom\\n    ) external override returns (uint256 amountOut) {\\n        address underlying = IYearnVault(vault).token();\\n\\n        uint256 withdrawAmount = (IERC20(vault).balanceOf(address(this)) *\\n            shareNum) / shareDenom;\\n        withdrawAmount = IYearnVault(vault).withdraw(withdrawAmount);\\n\\n        if (tokenOut != underlying) {\\n            amountOut = registry.swap(underlying, tokenOut, withdrawAmount);\\n        } else {\\n            amountOut = withdrawAmount;\\n        }\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function getUnderlying(address vault)\\n        external\\n        view\\n        override\\n        returns (address[] memory tokens)\\n    {\\n        tokens = new address[](1);\\n        tokens[0] = IYearnVault(vault).token();\\n    }\\n\\n    function getPrice(\\n        IRegistry registry,\\n        address vault,\\n        address account\\n    ) external view override returns (uint256) {\\n        uint256 totalAssets = IYearnVault(vault).totalAssets();\\n        uint256 vaultBalance = IYearnVault(vault).balanceOf(account);\\n        uint256 vaultTotalSupply = IYearnVault(vault).totalSupply();\\n        if (vaultTotalSupply == 0) {\\n            return 0;\\n        }\\n        uint256 balance = ((totalAssets * vaultBalance) / vaultTotalSupply);\\n        return registry.toUSD(IYearnVault(vault).token(), balance);\\n    }\\n}\\n\",\"keccak256\":\"0x8bf192d22fe28d876d568b3f87e1b534eef5856e94f15a85cf7b1fe50474dfcf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506115c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630284c3f51461005c5780634e89a711146100825780635cbc9b8d146100a25780637100d05c146100eb57806397da6d30146100fe575b600080fd5b61006f61006a366004610f0a565b610111565b6040519081526020015b60405180910390f35b610095610090366004610f5b565b6102b1565b6040516100799190610fbc565b6100de6040518060400160405280601781526020017f596561726e53696e676c65546f6b656e5069706c696e6500000000000000000081525081565b6040516100799190610fff565b61006f6100f9366004611032565b61036d565b61006f61010c36600461107d565b61055b565b600080846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017691906110d8565b90506000816001600160a01b0316856001600160a01b0316146101af576101a86001600160a01b0388168684876106fa565b90506101b2565b50825b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af1158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906110f5565b5060405163b6b55f2560e01b8152600481018290526001600160a01b0387169063b6b55f25906024016020604051808303816000875af115801561026d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102919190611117565b506102a66001600160a01b038816838361080a565b979650505050505050565b60408051600180825281830190925260609160208083019080368337019050509050816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033591906110d8565b8160008151811061034857610348611146565b60200260200101906001600160a01b031690816001600160a01b031681525050919050565b600080836001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611117565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918616906370a0823190602401602060405180830381865afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190611117565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190611117565b9050806000036104be5760009350505050610554565b6000816104cb8486611172565b6104d59190611191565b905061054d876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c91906110d8565b6001600160a01b038a16908361080a565b9450505050505b9392505050565b600080856001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c091906110d8565b6040516370a0823160e01b8152306004820152909150600090849086906001600160a01b038a16906370a0823190602401602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190611117565b61063c9190611172565b6106469190611191565b604051632e1a7d4d60e01b8152600481018290529091506001600160a01b03881690632e1a7d4d906024016020604051808303816000875af1158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190611117565b9050816001600160a01b0316866001600160a01b0316146106eb576106e46001600160a01b0389168388846106fa565b92506106ef565b8092505b505095945050505050565b604051634b59de7960e01b81526001600160a01b03848116600483015283811660248301526000918291871690634b59de7990604401600060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610775919081019061120d565b905060018151600181111561078c5761078c6112e1565b14610801576107fe866001600160a01b0316632f672d876040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f691906110d8565b86868661089f565b91505b50949350505050565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e91906112f7565b61087990600a6113fe565b6108838585610bf2565b61088d9084611172565b6108979190611191565b949350505050565b604080516002808252606082018352600092839291906020830190803683370190505090508484826000815181106108d9576108d9611146565b60200260200101836001815181106108f3576108f3611146565b6001600160a01b03938416602091820292909201015291811690915260405163d06ca61f60e01b815260009188169063d06ca61f90610938908790869060040161140d565b600060405180830381865afa92505050801561097657506040513d6000823e601f3d908101601f191682016040526109739190810190611426565b60015b156109a657806001825161098a91906114cc565b8151811061099a5761099a611146565b60200260200101519150505b60408051600380825260808201909252600091829190602082016060803683370190505090506000896001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3091906110d8565b9050806001600160a01b0316896001600160a01b031614158015610a665750806001600160a01b0316886001600160a01b031614155b15610b6b5788818984600081518110610a8157610a81611146565b6020026020010185600181518110610a9b57610a9b611146565b6020026020010186600281518110610ab557610ab5611146565b6001600160a01b039485166020918202929092010152928216909252918216905260405163d06ca61f60e01b8152908b169063d06ca61f90610afd908a90869060040161140d565b600060405180830381865afa925050508015610b3b57506040513d6000823e601f3d908101601f19168201604052610b389190810190611426565b60015b15610b6b578060018251610b4f91906114cc565b81518110610b5f57610b5f611146565b60200260200101519350505b6000841180610b7a5750600083115b610bcb5760405162461bcd60e51b815260206004820152601760248201527f4e6f207377617020726f75746520617661696c61626c6500000000000000000060448201526064015b60405180910390fd5b610be48a848611610bdc5783610bde565b865b89610d10565b9a9950505050505050505050565b60405162b6d99560e71b81526001600160a01b0382811660048301526000918291851690635b6cca8090602401602060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906110d8565b90506001600160a01b03811615610d01576000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190611502565b5050509150506000811215610cef57600092505050610d0a565b610cf881610e9c565b92505050610d0a565b6305f5e1009150505b92915050565b600082600081518110610d2557610d25611146565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038681166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da491906110f5565b506040516338ed173960e01b81526000906001600160a01b038616906338ed173990610ddc9086908590899030904290600401611552565b6000604051808303816000875af1158015610dfb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e239190810190611426565b90508060018251610e3491906114cc565b81518110610e4457610e44611146565b6020026020010151915060008211610e945760405162461bcd60e51b815260206004820152601360248201527243616e2774207377617020666f72207a65726f60681b6044820152606401610bc2565b509392505050565b600080821215610eee5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610bc2565b5090565b6001600160a01b0381168114610f0757600080fd5b50565b60008060008060808587031215610f2057600080fd5b8435610f2b81610ef2565b93506020850135610f3b81610ef2565b92506040850135610f4b81610ef2565b9396929550929360600135925050565b600060208284031215610f6d57600080fd5b813561055481610ef2565b600081518084526020808501945080840160005b83811015610fb15781516001600160a01b031687529582019590820190600101610f8c565b509495945050505050565b6020815260006105546020830184610f78565b60005b83811015610fea578181015183820152602001610fd2565b83811115610ff9576000848401525b50505050565b602081526000825180602084015261101e816040850160208701610fcf565b601f01601f19169190910160400192915050565b60008060006060848603121561104757600080fd5b833561105281610ef2565b9250602084013561106281610ef2565b9150604084013561107281610ef2565b809150509250925092565b600080600080600060a0868803121561109557600080fd5b85356110a081610ef2565b945060208601356110b081610ef2565b935060408601356110c081610ef2565b94979396509394606081013594506080013592915050565b6000602082840312156110ea57600080fd5b815161055481610ef2565b60006020828403121561110757600080fd5b8151801515811461055457600080fd5b60006020828403121561112957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561118c5761118c61115c565b500290565b6000826111ae57634e487b7160e01b600052601260045260246000fd5b500490565b6040805190810167ffffffffffffffff811182821017156111d6576111d6611130565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561120557611205611130565b604052919050565b6000602080838503121561122057600080fd5b825167ffffffffffffffff8082111561123857600080fd5b908401906040828703121561124c57600080fd5b6112546111b3565b82516002811061126357600080fd5b8152828401518281111561127657600080fd5b80840193505086601f84011261128b57600080fd5b82518281111561129d5761129d611130565b6112af601f8201601f191686016111dc565b925080835287858286010111156112c557600080fd5b6112d481868501878701610fcf565b5092830152509392505050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561130957600080fd5b815160ff8116811461055457600080fd5b600181815b8085111561135557816000190482111561133b5761133b61115c565b8085161561134857918102915b93841c939080029061131f565b509250929050565b60008261136c57506001610d0a565b8161137957506000610d0a565b816001811461138f5760028114611399576113b5565b6001915050610d0a565b60ff8411156113aa576113aa61115c565b50506001821b610d0a565b5060208310610133831016604e8410600b84101617156113d8575081810a610d0a565b6113e2838361131a565b80600019048211156113f6576113f661115c565b029392505050565b600061055460ff84168361135d565b8281526040602082015260006108976040830184610f78565b6000602080838503121561143957600080fd5b825167ffffffffffffffff8082111561145157600080fd5b818501915085601f83011261146557600080fd5b81518181111561147757611477611130565b8060051b91506114888483016111dc565b81815291830184019184810190888411156114a257600080fd5b938501935b838510156114c0578451825293850193908501906114a7565b98975050505050505050565b6000828210156114de576114de61115c565b500390565b805169ffffffffffffffffffff811681146114fd57600080fd5b919050565b600080600080600060a0868803121561151a57600080fd5b611523866114e3565b9450602086015193506040860151925060608601519150611546608087016114e3565b90509295509295909350565b85815284602082015260a06040820152600061157160a0830186610f78565b6001600160a01b039490941660608301525060800152939250505056fea2646970667358221220e43ba2ec84f555a4c0e35282ceee3e884e284a4beb8ebe7d01fad3b5355f04cb64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630284c3f51461005c5780634e89a711146100825780635cbc9b8d146100a25780637100d05c146100eb57806397da6d30146100fe575b600080fd5b61006f61006a366004610f0a565b610111565b6040519081526020015b60405180910390f35b610095610090366004610f5b565b6102b1565b6040516100799190610fbc565b6100de6040518060400160405280601781526020017f596561726e53696e676c65546f6b656e5069706c696e6500000000000000000081525081565b6040516100799190610fff565b61006f6100f9366004611032565b61036d565b61006f61010c36600461107d565b61055b565b600080846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017691906110d8565b90506000816001600160a01b0316856001600160a01b0316146101af576101a86001600160a01b0388168684876106fa565b90506101b2565b50825b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af1158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906110f5565b5060405163b6b55f2560e01b8152600481018290526001600160a01b0387169063b6b55f25906024016020604051808303816000875af115801561026d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102919190611117565b506102a66001600160a01b038816838361080a565b979650505050505050565b60408051600180825281830190925260609160208083019080368337019050509050816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033591906110d8565b8160008151811061034857610348611146565b60200260200101906001600160a01b031690816001600160a01b031681525050919050565b600080836001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611117565b6040516370a0823160e01b81526001600160a01b0385811660048301529192506000918616906370a0823190602401602060405180830381865afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190611117565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190611117565b9050806000036104be5760009350505050610554565b6000816104cb8486611172565b6104d59190611191565b905061054d876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c91906110d8565b6001600160a01b038a16908361080a565b9450505050505b9392505050565b600080856001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c091906110d8565b6040516370a0823160e01b8152306004820152909150600090849086906001600160a01b038a16906370a0823190602401602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190611117565b61063c9190611172565b6106469190611191565b604051632e1a7d4d60e01b8152600481018290529091506001600160a01b03881690632e1a7d4d906024016020604051808303816000875af1158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190611117565b9050816001600160a01b0316866001600160a01b0316146106eb576106e46001600160a01b0389168388846106fa565b92506106ef565b8092505b505095945050505050565b604051634b59de7960e01b81526001600160a01b03848116600483015283811660248301526000918291871690634b59de7990604401600060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610775919081019061120d565b905060018151600181111561078c5761078c6112e1565b14610801576107fe866001600160a01b0316632f672d876040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f691906110d8565b86868661089f565b91505b50949350505050565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e91906112f7565b61087990600a6113fe565b6108838585610bf2565b61088d9084611172565b6108979190611191565b949350505050565b604080516002808252606082018352600092839291906020830190803683370190505090508484826000815181106108d9576108d9611146565b60200260200101836001815181106108f3576108f3611146565b6001600160a01b03938416602091820292909201015291811690915260405163d06ca61f60e01b815260009188169063d06ca61f90610938908790869060040161140d565b600060405180830381865afa92505050801561097657506040513d6000823e601f3d908101601f191682016040526109739190810190611426565b60015b156109a657806001825161098a91906114cc565b8151811061099a5761099a611146565b60200260200101519150505b60408051600380825260808201909252600091829190602082016060803683370190505090506000896001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3091906110d8565b9050806001600160a01b0316896001600160a01b031614158015610a665750806001600160a01b0316886001600160a01b031614155b15610b6b5788818984600081518110610a8157610a81611146565b6020026020010185600181518110610a9b57610a9b611146565b6020026020010186600281518110610ab557610ab5611146565b6001600160a01b039485166020918202929092010152928216909252918216905260405163d06ca61f60e01b8152908b169063d06ca61f90610afd908a90869060040161140d565b600060405180830381865afa925050508015610b3b57506040513d6000823e601f3d908101601f19168201604052610b389190810190611426565b60015b15610b6b578060018251610b4f91906114cc565b81518110610b5f57610b5f611146565b60200260200101519350505b6000841180610b7a5750600083115b610bcb5760405162461bcd60e51b815260206004820152601760248201527f4e6f207377617020726f75746520617661696c61626c6500000000000000000060448201526064015b60405180910390fd5b610be48a848611610bdc5783610bde565b865b89610d10565b9a9950505050505050505050565b60405162b6d99560e71b81526001600160a01b0382811660048301526000918291851690635b6cca8090602401602060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906110d8565b90506001600160a01b03811615610d01576000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190611502565b5050509150506000811215610cef57600092505050610d0a565b610cf881610e9c565b92505050610d0a565b6305f5e1009150505b92915050565b600082600081518110610d2557610d25611146565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038681166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da491906110f5565b506040516338ed173960e01b81526000906001600160a01b038616906338ed173990610ddc9086908590899030904290600401611552565b6000604051808303816000875af1158015610dfb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e239190810190611426565b90508060018251610e3491906114cc565b81518110610e4457610e44611146565b6020026020010151915060008211610e945760405162461bcd60e51b815260206004820152601360248201527243616e2774207377617020666f72207a65726f60681b6044820152606401610bc2565b509392505050565b600080821215610eee5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610bc2565b5090565b6001600160a01b0381168114610f0757600080fd5b50565b60008060008060808587031215610f2057600080fd5b8435610f2b81610ef2565b93506020850135610f3b81610ef2565b92506040850135610f4b81610ef2565b9396929550929360600135925050565b600060208284031215610f6d57600080fd5b813561055481610ef2565b600081518084526020808501945080840160005b83811015610fb15781516001600160a01b031687529582019590820190600101610f8c565b509495945050505050565b6020815260006105546020830184610f78565b60005b83811015610fea578181015183820152602001610fd2565b83811115610ff9576000848401525b50505050565b602081526000825180602084015261101e816040850160208701610fcf565b601f01601f19169190910160400192915050565b60008060006060848603121561104757600080fd5b833561105281610ef2565b9250602084013561106281610ef2565b9150604084013561107281610ef2565b809150509250925092565b600080600080600060a0868803121561109557600080fd5b85356110a081610ef2565b945060208601356110b081610ef2565b935060408601356110c081610ef2565b94979396509394606081013594506080013592915050565b6000602082840312156110ea57600080fd5b815161055481610ef2565b60006020828403121561110757600080fd5b8151801515811461055457600080fd5b60006020828403121561112957600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561118c5761118c61115c565b500290565b6000826111ae57634e487b7160e01b600052601260045260246000fd5b500490565b6040805190810167ffffffffffffffff811182821017156111d6576111d6611130565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561120557611205611130565b604052919050565b6000602080838503121561122057600080fd5b825167ffffffffffffffff8082111561123857600080fd5b908401906040828703121561124c57600080fd5b6112546111b3565b82516002811061126357600080fd5b8152828401518281111561127657600080fd5b80840193505086601f84011261128b57600080fd5b82518281111561129d5761129d611130565b6112af601f8201601f191686016111dc565b925080835287858286010111156112c557600080fd5b6112d481868501878701610fcf565b5092830152509392505050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561130957600080fd5b815160ff8116811461055457600080fd5b600181815b8085111561135557816000190482111561133b5761133b61115c565b8085161561134857918102915b93841c939080029061131f565b509250929050565b60008261136c57506001610d0a565b8161137957506000610d0a565b816001811461138f5760028114611399576113b5565b6001915050610d0a565b60ff8411156113aa576113aa61115c565b50506001821b610d0a565b5060208310610133831016604e8410600b84101617156113d8575081810a610d0a565b6113e2838361131a565b80600019048211156113f6576113f661115c565b029392505050565b600061055460ff84168361135d565b8281526040602082015260006108976040830184610f78565b6000602080838503121561143957600080fd5b825167ffffffffffffffff8082111561145157600080fd5b818501915085601f83011261146557600080fd5b81518181111561147757611477611130565b8060051b91506114888483016111dc565b81815291830184019184810190888411156114a257600080fd5b938501935b838510156114c0578451825293850193908501906114a7565b98975050505050505050565b6000828210156114de576114de61115c565b500390565b805169ffffffffffffffffffff811681146114fd57600080fd5b919050565b600080600080600060a0868803121561151a57600080fd5b611523866114e3565b9450602086015193506040860151925060608601519150611546608087016114e3565b90509295509295909350565b85815284602082015260a06040820152600061157160a0830186610f78565b6001600160a01b039490941660608301525060800152939250505056fea2646970667358221220e43ba2ec84f555a4c0e35282ceee3e884e284a4beb8ebe7d01fad3b5355f04cb64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}